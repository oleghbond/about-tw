created: 20170128105237581
headingorder: 040
modified: 20170129221112244
tags: [[Хостинг Тідлівікі]]
title: Вікі проект у git-мережі
type: text/vnd.tiddlywiki

!! Призначення

Ця інструкція призначена для тих, хто:

* прагне отримати сталу захищену мережу, 
* спільно в команді створювати й розвивати складні текстові документи у зручному вікі-середовищі, 
* за потреби контролювати всі зміни і повертатися на потрібну попередню версію, 
* зльоту публікувати результати в інтернеті, 
* не побоюватись за збереженість даних проекту.

Останнє означає, що навіть у випадку втрати сервера, повна копія всіх текстів всієї команди по цілому проекту залишається у кожного члена команди. Відповідно, за відсутність інтернет-мережі автор продовжує повноцінно працювати з матеріалами.

!! Рішення

Запропоноване рішення включає такі складові:

* Текстовий редактор - вікі-двигун ''Тіддлівікі'' версії 5 і вище, запущений під ''Node.js''.
* Центральне сховище документів - система керування версіями [[github|https://uk.wikipedia.org/wiki/GitHub]] або [[gitlab|https://uk.wikipedia.org/wiki/GitLab]] (у разі потреби закритих груп).

Успішність git-мережі для авторів-непрограмистів залежить від легкості входження в мережу.

Саме тому ця інструкція описує установку необхідного софта для організації робочого локального середовища, а також мінімально необхідні дії із взаємодії авторів через центральне сховище документів команди.

Список здається задовгим, але насправді він не складний, а зробити це потрібно лише один раз і на довгі роки.

!! Необхідні компоненти

!!! На локальному комп'ютері:

* [[Node.js|https://uk.wikipedia.org/wiki/Node.js]] — платформа з відкритим кодом для виконання високопродуктивних мережевих застосунків, написаних мовою ~JavaScript. Виступає середовищем для запуску Tiddlywiki.
* [[Tiddlywiki|https://uk.wikipedia.org/wiki/TiddlyWiki]] — вікі-двигун з відкритим вихідним ~JavaScript кодом, який є веб-додатком, що вміщує і вміст і код в одному HTML-файлі.
* [[Git|https://uk.wikipedia.org/wiki/Git]] - клієнтський софт розподіленої системи керування версіями файлів та спільної роботи.
* [[TortoiseGit|https://en.wikipedia.org/wiki/TortoiseGit]] — візуальна оболонка клієнту системи управління версіями файлів (у нашому випадку тексти) ''git'' для ОС Windows. Оболонка потрібна для тих, хто уникає управління git з командного рядка.

!!! На інтернет-сервері

* Достатньо лише зареєструватися на одному з git-сумісних репозитаріїв (далі - репо), а потім ще дізнатись назву групи та проекту в цій групі, до якого ви приєднуєтесь, а також отримати дозвіл до групи та/або проекту у разі, якщо, вони закриті. В нашому варіанті це сервіс [[github.com|https://github.com/]].

!! Встановлення на локальному комп'ютері

Описаний процес відбувається в середовищі ОС Віндовс 10, але це жодним чином не є обмеженням для реалізації запропонованого підходу, просто я працюю в цій ОС.

* Встановіть Node.js і Tiddlywiki, як це показано у статті [[ТВ на node.js і Windows]].
* Завантажте і встановіть (або оновіть) git-клієнт із сайту https://git-scm.com/download/. 
* Завантажте і встановіть візуальну оболонку git-клієнту ~TortoiseGit із сайту https://tortoisegit.org/download/.
*> ''Зважайте на те, що ~TortoiseGit призначений лише для роботи під ОС Віндовс.''
** Детальна документація англійською із встановлення і початку роботи з ~TortoiseGit розташована тут: https://tortoisegit.org/docs/tortoisegit/. Для роботи потрібен підрозділ 2.
** Полегшений варіант документації російською із встановлення ~TortoiseGit наведений тут: http://pr0git.blogspot.com/2015/03/git-tortoisegit.html.

!! Базові підходи роботи з власними текстами

Мінімально необхідні прийоми роботи з власними текстами у git-мережі з допомогою ~TortoiseGit, викладені нижче, підготовлені непрограмістом для використання непрограмістами, тобто без спроби занурення у нетрі VCS і git, але для досягнення основної мети, зазначеної на початку інструкції.

!!! Започаткування участі у проекті

Перші три з нижчезазначених пунктів потрібні рідше при під'єднанні учасника до існуючого на інтернет-сервері проекту.

; Створити порожні папки для репо на локальному комп'ютері
: Утворіть файлові папки так, щоб вони відображали структуру груп і проектів, у яких ви берете участь;
:> <div>__Рекомендація__: створіть файлові папки за подібною схемою (нижче)
''<ul class="list-tree">
<li>my-wiki-docs
<ul>
<li>3036-protw-tw5</li>
<li>3038-protw-rder-uk</li>
<li>3040-protw-protw</li>
</ul></li></ul>''
де:
<ul>
<li>коренева папка, наприклад, ''my-wiki-docs'' містить всі ваші групи і проекти у git-мережі;</li>
<li>ім'я кожної підпапки складається з трьох частин, наприклад: <ul>
<li>''3036'' - порт локального запуску Тідлівікі через веб-адресу `https://127.0.0.1:3036` (див. підрозділ ''Встановлення Тідлівікі'' у статті [[ТВ на node.js і Windows]]), </li><li>''protw'' - скорочена назва групи на `github.com/protw/`, </li><li>''tw5'' - скорочена назва проекту у групі protw на `github.com/protw/tw5/`.</li></ul></li>
</ul>
</div>
; Створіть git-репо проекту
: Оберіть папку, відповідну до проекту, клацніть правою кнопкою миші по значку цієї папки, у контекстному меню оберіть [[Create Repository|https://tortoisegit.org/docs/tortoisegit/tgit-dug-create.html]]
; Клонуйте репо проекту з інтернет-сервера
: Це процедура копіювання текстів проекту з інтернет репозитарію, наприклад, `github.com/protw/tw5/` у вашу локальну папку `3036-protw-tw5`. Для цього оберіть папку, клацніть правою кнопкою миші по значку цієї папки, у контекстному меню оберіть [[Git Clone...|https://tortoisegit.org/docs/tortoisegit/tgit-dug-clone.html]] У полі внесіть ''URL'' веб-адресу репозитарію `https://github.com/protw/tw5.git`, а у полі ''Directory'' повний шлях локальної копії (клона) репозитарію `D:\my-wiki-docs\3036-protw-tw5`.

!!! Щоденна робота з проектом

Решта три пункти застосовуються після сеансів внесення змін у тексти проектів.

; Комітуйте зміни (commit changes) у ваш локальний репо
: Це процедура занесення змін, що ви зробили у текстах вашого проекту у папці , наприклад, `3036-protw-tw5`до локального репо. Для цього оберіть папку, клацніть правою кнопкою миші по значку цієї папки, у контекстному меню оберіть [[Git Commit -> "master"|https://tortoisegit.org/docs/tortoisegit/tgit-dug-commit.html]]. У діалоговому вікні (рисунок 2.9) у верхній частині введіть коментар стосовно зроблених змін, у нижній половині галочками відмітьте файли для внесення змін щодо них до локального репо. Зрештою натисніть кнопку ''Commit''.
; Витягніть інші зміни (pull changes) з інтернет репо до вашого локального репо
: Перед проштовхуванням ваших змін з локального репо до інтернет репо іноді потрібно витягути зміни з інтернет репо, які могли бути внесені (закомітовані та проштовхнуті) до проекту іншими учасниками на своїх локальних комп'ютерах. Для цього оберіть папку, клацніть правою кнопкою миші по значку цієї папки, у контекстному меню оберіть [[Pull ...|https://tortoisegit.org/docs/tortoisegit/tgit-dug-pull.html]] Відмітьте ''Arbitrary URL'', введіть у полі праворуч адресу відповідного проекту, наприклад, `https://gitlab.com/protw/tw5`, натисніть кнопку ''OK''.
; Проштовхніть ваші зміни (push changes) з локального репо до інтернет репо
: Це процедура призначена для внесення ваших змін у текстах (проштовхування або push changes) з локального репо до інтернет репо. Для цього оберіть папку, клацніть правою кнопкою миші по значку цієї папки, у контекстному меню оберіть  [[Push ...|https://tortoisegit.org/docs/tortoisegit/tgit-dug-push.html]] Відмітьте ''Arbitrary URL'', введіть у полі праворуч адресу відповідного проекту, наприклад, `https://gitlab.com/protw/tw5`, натисніть кнопку ''OK''.